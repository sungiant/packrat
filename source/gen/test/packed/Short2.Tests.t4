    // Tests the Short2 packed data type.
    [TestFixture]
    public class Short2Tests
    {
        // Iterates over a random selection of values within the range of
        // possible Short2 values and makes sure that unpacking them and
        // then re-packing that result yields the original packed value.
        [Test]
        public void TestRandomValues_i () {
            var rand = new System.Random ();
            var buff = new Byte[4];

            for (Int32 i = 0; i < Settings.NumTests; ++i) {
                rand.NextBytes (buff);
                UInt32 packed = BitConverter.ToUInt32 (buff, 0);
                var packedObj = new Short2 ();
                packedObj.PackedValue = packed;
                Single realX, realY = 0f;
                packedObj.UnpackTo (out realX, out realY);
                var newPackedObj = new Short2 (realX, realY);
                Assert.That (newPackedObj.PackedValue, Is.EqualTo (packed));
            }
        }

        // For a given example, this test ensures that the ToString function
        // yields the expected string.
        [Test]
        public void TestMemberFn_ToString_i () {
            var testCase = new Short2 ();
            testCase.PackFrom (0.656f, 0.125f);
            String s = testCase.ToString ();
            Assert.That (s, Is.EqualTo ("00000001"));
        }

        // Makes sure that the hashing function is good by testing
        // random scenarios and ensuring that there are no more than a
        // reasonable number of collisions.
        [Test]
        public void TestMemberFn_GetHashCode_i () {
            HashSet<Int32> hs = new HashSet<Int32>();
            var rand = new System.Random ();
            var buff = new Byte[4];
            UInt32 collisions = 0;
            for (Int32 i = 0; i < Settings.NumTests; ++i) {
                rand.NextBytes (buff);
                UInt32 packed = BitConverter.ToUInt32 (buff, 0);
                var packedObj = new Short2 ();
                packedObj.PackedValue = packed;
                Int32 hc = packedObj.GetHashCode ();
                if (hs.Contains (hc)) ++collisions;
                hs.Add (hc);
            }
            Assert.That (collisions, Is.LessThan (10));
        }
    }

