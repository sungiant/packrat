    // Tests the Rgba1010102 packed data type.
    [TestFixture]
    public class Rgba1010102Tests {
        // Iterates over a random selection of values within the range of
        // possible Rgba1010102 values and makes sure that unpacking them and
        // then re-packing that result yields the original packed value.
        [Test]
        public void TestRandomValues_i () {
            var rand = new System.Random ();
            var buff = new Byte[4];

            for (Int32 i = 0; i < Settings.NumTests; ++i) {
                rand.NextBytes (buff);
                UInt32 packed = BitConverter.ToUInt32 (buff, 0);
                var packedObj = new Rgba1010102 ();
                packedObj.PackedValue = packed;
                Single realR, realG, realB, realA = 0f;
                packedObj.UnpackTo (out realR, out realG, out realB, out realA);
                var newPackedObj = new Rgba1010102 (realR, realG, realB, realA);
                Assert.That (newPackedObj.PackedValue, Is.EqualTo (packed));
            }
        }

        // For a given example, this test ensures that the ToString function
        // yields the expected string.
        [Test]
        public void TestMemberFn_ToString_i () {
            var testCase = new Rgba1010102 ();
            testCase.PackFrom (0.656f, 0.125f, 0.222f, 0.861f);
            String s = testCase.ToString ();
            Assert.That (s, Is.EqualTo ("8DD0A7EF"));
        }

        // Makes sure that the hashing function is good by testing
        // random scenarios and ensuring that there are no more than a
        // reasonable number of collisions.
        [Test]
        public void TestMemberFn_GetHashCode_i () {
            HashSet<Int32> hs = new HashSet<Int32>();
            var rand = new System.Random ();
            var buff = new Byte[4];
            UInt32 collisions = 0;
            for (Int32 i = 0; i < Settings.NumTests; ++i) {
                rand.NextBytes (buff);
                UInt32 packed = BitConverter.ToUInt32 (buff, 0);
                var packedObj = new Rgba1010102 ();
                packedObj.PackedValue = packed;
                Int32 hc = packedObj.GetHashCode ();
                if (hs.Contains (hc)) ++collisions;
                hs.Add (hc);
            }
            Assert.That (collisions, Is.LessThan (10));
        }
    }

