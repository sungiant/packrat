    [StructLayout (LayoutKind.Sequential), Serializable]
    public partial struct Rgba32
        : IPackedValue<UInt32>, IEquatable<Rgba32>, IPackedReal4
    {
        public Byte R {
            get { return unchecked ((Byte)packedValue); }
            set { packedValue = (packedValue & 0xffffff00) | value; }
        }

        public Byte G {
            get { return unchecked ((Byte)(packedValue >> 8)); }
            set { packedValue = (packedValue & 0xffff00ff) | ((UInt32)(value << 8)); }
        }

        public Byte B {
            get { return unchecked ((Byte)(packedValue >> 0x10)); }
            set { packedValue = (packedValue & 0xff00ffff) | ((UInt32)(value << 0x10)); }
        }

        public Byte A {
            get { return unchecked ((Byte)(packedValue >> 0x18)); }
            set { packedValue = (packedValue & 0xffffff) | ((UInt32)(value << 0x18)); }
        }

        public override String      ToString        () { return String.Format ("{{R:{0} G:{1} B:{2} A:{3}}}", R, G, B, A); }
<#  GeneratePackedCommon ("Rgba32", "UInt32", "zPackedRgba", new [] { "zR", "zG", "zB", "zA" }); #>

        public static void Pack (Single zR, Single zG, Single zB, Single zA, out UInt32 zPackedRgba) {
            if (zR < 0f || zR > 1f || zG < 0f || zG > 1f || zB < 0f || zB > 1f || zA < 0f || zA > 1f )
                throw new ArgumentException ("A component of the input source is not unsigned and normalised.");

            UInt32 r = Utils.PackUnsignedNormalisedValue (0xff, zR);
            UInt32 g = Utils.PackUnsignedNormalisedValue (0xff, zG) << 8;
            UInt32 b = Utils.PackUnsignedNormalisedValue (0xff, zB) << 16;
            UInt32 a = Utils.PackUnsignedNormalisedValue (0xff, zA) << 24;

            zPackedRgba = ((r | g) | b) | a;
        }

        public static void Unpack (UInt32 zPackedRgba, out Single zR, out Single zG, out Single zB, out Single zA) {
            zR = Utils.UnpackUnsignedNormalisedValue (0xff, zPackedRgba);
            zG = Utils.UnpackUnsignedNormalisedValue (0xff, (UInt32)(zPackedRgba >> 8));
            zB = Utils.UnpackUnsignedNormalisedValue (0xff, (UInt32)(zPackedRgba >> 16));
            zA = Utils.UnpackUnsignedNormalisedValue (0xff, (UInt32)(zPackedRgba >> 24));

            if (zR < 0f || zR > 1f || zG < 0f || zG > 1f || zB < 0f || zB > 1f || zA < 0f || zA > 1f )
                throw new Exception ("A the input source doesn't yield an unsigned normalised output: " + zPackedRgba);
        }

        UInt32 packedValue;
    }

