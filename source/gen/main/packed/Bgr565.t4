    [StructLayout (LayoutKind.Sequential), Serializable]
    public struct Bgr565
        : IPackedValue<UInt16>, IEquatable<Bgr565>, IPackedReal3
    {
        public override String      ToString        () { return packedValue.ToString ("X4"); }
<#  GeneratePackedCommon ("Bgr565", "UInt16", "zPackedBgr", new [] { "zB", "zG", "zR" }); #>

        public static void Pack (Single zB, Single zG, Single zR, out UInt16 zPackedBgr) {
            if (zR < 0f || zR > 1f || zG < 0f || zG > 1f || zB < 0f || zB > 1f)
                throw new ArgumentException ("A component of the input source is not unsigned and normalised.");

            UInt32 b = Utils.PackUnsignedNormalisedValue (31f, zB);
            UInt32 g = Utils.PackUnsignedNormalisedValue (63f, zG) << 5;
            UInt32 r = Utils.PackUnsignedNormalisedValue (31f, zR) << 11;

            zPackedBgr = (UInt16)((r | g) | b);
        }

        public static void Unpack (UInt16 zPackedBgr, out Single zB, out Single zG, out Single zR) {
            zB = Utils.UnpackUnsignedNormalisedValue (0x1f, zPackedBgr);
            zG = Utils.UnpackUnsignedNormalisedValue (0x3f, (UInt32)(zPackedBgr >> 5));
            zR = Utils.UnpackUnsignedNormalisedValue (0x1f, (UInt32)(zPackedBgr >> 11));

            if (zR < 0f || zR > 1f || zG < 0f || zG > 1f || zB < 0f || zB > 1f)
                throw new Exception ("A the input source doesn't yield an unsigned normalised output: " + zPackedBgr);
        }

        UInt16 packedValue;
    }

