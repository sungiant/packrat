    [StructLayout (LayoutKind.Sequential), Serializable]
    public struct Rgba1010102
        : IPackedValue<UInt32>, IEquatable<Rgba1010102>, IPackedReal4
    {
        public override String      ToString        () { return packedValue.ToString ("X8"); }
<#  GeneratePackedCommon ("Rgba1010102", "UInt32", "zPackedRgba", new [] { "zR", "zG", "zB", "zA" }); #>

        public static void Pack (Single zR, Single zG, Single zB, Single zA, out UInt32 zPackedRgba) {
            if (zR < 0f || zR > 1f || zG < 0f || zG > 1f || zB < 0f || zB > 1f || zA < 0f || zA > 1f)
                throw new ArgumentException ("A component of the input source is not unsigned and normalised.");

            UInt32 r = Utils.PackUnsignedNormalisedValue (0xffff, zR);
            UInt32 g = Utils.PackUnsignedNormalisedValue (0xffff, zG) << 10;
            UInt32 b = Utils.PackUnsignedNormalisedValue (0xffff, zB) << 20;
            UInt32 a = Utils.PackUnsignedNormalisedValue (0xffff, zA) << 30;

            zPackedRgba = ((r | g) | b) | a;
        }

        public static void Unpack (UInt32 zPackedRgba, out Single zR, out Single zG, out Single zB, out Single zA) {
            zR = Utils.UnpackUnsignedNormalisedValue (0xffff, zPackedRgba);
            zG = Utils.UnpackUnsignedNormalisedValue (0xffff, (UInt32)(zPackedRgba >> 10));
            zB = Utils.UnpackUnsignedNormalisedValue (0xffff, (UInt32)(zPackedRgba >> 20));
            zA = Utils.UnpackUnsignedNormalisedValue (0xffff, (UInt32)(zPackedRgba >> 30));

            if (zR < 0f || zR > 1f || zG < 0f || zG > 1f || zB < 0f || zB > 1f || zA < 0f || zA > 1f)
                throw new Exception ("A the input source doesn't yield an unsigned normalised output: " + zPackedRgba);
        }

        UInt32 packedValue;
    }

