    [StructLayout (LayoutKind.Sequential), Serializable]
    public struct NormalisedByte2
        : IPackedValue<UInt16>
        , IEquatable<NormalisedByte2>
        , IPackedReal2
    {
        public override String ToString ()
        {
            return this.packedValue.ToString ("X4", CultureInfo.InvariantCulture);
        }

        static void Pack(Single zX, Single zY, out UInt16 zPackedXy)
        {
            if (zX < -1f || zX > 1f || zY < -1f || zY > 1f)
            {
                throw new ArgumentException ("A component of the input source is not normalised.");
            }

            UInt32 x = Utils.PackSignedNormalised(0xff, zX);
            UInt32 y = Utils.PackSignedNormalised(0xff, zY) << 8;

            zPackedXy = (UInt16)(x | y);
        }

        static void Unpack(UInt16 zPackedXy, out Single zX, out Single zY)
        {
            zX = Utils.UnpackSignedNormalised (0xff, zPackedXy);
            zY = Utils.UnpackSignedNormalised (0xff, (UInt32) (zPackedXy >> 8));

            if (zX < -1f || zX > 1f || zY < -1f || zY > 1f)
            {
                throw new Exception ("A the input source doesn't yeild a normalised output: " + zPackedXy);
            }
        }

<#  GeneratePackedCommon("NormalisedByte2", "UInt16", "zPackedXy", new [] { "zX", "zY" }); #>
    }

