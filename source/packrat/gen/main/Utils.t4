    internal static class Utils
    {
        static Double ClampAndRound (Single value, Single min, Single max)
        {
            if (Single.IsNaN (value))
            {
                return 0.0;
            }

            if (Single.IsInfinity (value))
            {
                return (Single.IsNegativeInfinity (value) ? ((Double)min) : ((Double)max));
            }

            if (value < min)
            {
                return (Double)min;
            }

            if (value > max)
            {
                return (Double)max;
            }

            return Math.Round ((Double)value);
        }

        internal static UInt32 PackSigned (UInt32 bitmask, Single value)
        {
            Single max = bitmask >> 1;
            Single min = -max - 1f;
            return (((UInt32)((Int32)ClampAndRound (value, min, max))) & bitmask);
        }

        internal static UInt32 PackUnsigned (Single bitmask, Single value)
        {
            return (UInt32)ClampAndRound (value, 0f, bitmask);
        }

        internal static UInt32 PackSignedNormalised (UInt32 bitmask, Single value)
        {
            if (value > 1f || value < 0f)
                throw new ArgumentException ("Input value must be normalised.");

            Single max = bitmask >> 1;
            value *= max;
            UInt32 result = (((UInt32)((Int32)ClampAndRound (value, -max, max))) & bitmask);
            return result;
        }

        internal static Single UnpackSignedNormalised (UInt32 bitmask, UInt32 value)
        {
            UInt32 num = (UInt32)((bitmask + 1) >> 1);

            if ((value & num) != 0)
            {
                if ((value & bitmask) == num)
                {
                    return -1f;
                }

                value |= ~bitmask;
            }
            else
            {
                value &= bitmask;
            }

            Single num2 = bitmask >> 1;

            Single result = (((Single)value) / num2);

            if (result > 1f || result < 0f)
                throw new ArgumentException ("Input value does not yield a normalised result.");

            return result;
        }

        internal static UInt32 PackUnsignedNormalisedValue (Single bitmask, Single value)
        {
            if (value > 1f || value < 0f)
                throw new ArgumentException ("Input value must be normalised.");

            value *= bitmask;
            UInt32 result = (UInt32)ClampAndRound (value, 0f, bitmask);
            return result;
        }

        internal static Single UnpackUnsignedNormalisedValue (UInt32 bitmask, UInt32 value)
        {
            value &= bitmask;
            Single result = (((Single)value) / ((Single)bitmask));

            if (result > 1f || result < 0f)
                throw new ArgumentException ("Input value does not yield a normalised result.");

            return result;
        }
    }

