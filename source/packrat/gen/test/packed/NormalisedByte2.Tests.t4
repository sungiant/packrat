    /// <summary>
    /// Tests the NormalisedByte2 packed data type.
    /// </summary>
    [TestFixture]
    public class NormalisedByte2Tests
    {
        /// <summary>
        /// Iterates over every possible NormalisedByte2 value and makes sure that
        /// unpacking them and then re-packing that result yeilds the
        /// original packed value.
        /// </summary>
        [Test]
        public void TestAllPossibleValues_i()
        {
            UInt16 packed = UInt16.MinValue;
            while ( packed < UInt16.MaxValue )
            {
                ++packed;
                // Cannot guarantee that this packed value is valid.
                try
                {
                    var packedObj = new NormalisedByte2();
                    packedObj.PackedValue = packed;
                    Single realX, realY = 0f;
                    packedObj.UnpackTo(out realX, out realY);
                    var newPackedObj = new NormalisedByte2(realX, realY);
                    Assert.That(newPackedObj.PackedValue, Is.EqualTo(packedObj.PackedValue));
                }
                catch(ArgumentException)
                {
                    continue;
                }
            }
        }

        /// <summary>
        /// For a given example, this test ensures that the ToString function
        /// yields the expected string.
        /// </summary>
        [Test]
        public void TestMemberFn_ToString_i()
        {
            var testCase = new NormalisedByte2();
            testCase.PackFrom(0.222f, 0.861f);
            String s = testCase.ToString ();
            Assert.That(s, Is.EqualTo("6D1C"));
        }

        /// <summary>
        /// Makes sure that the hashing function is good by testing
        /// all scenarios and ensuring that there are no collisions.
        /// </summary>
        [Test]
        public void TestMemberFn_GetHashCode_i ()
        {
            HashSet<Int32> hs = new HashSet<Int32>();
            UInt16 packed = UInt16.MinValue;
            while ( packed < UInt16.MaxValue )
            {
                ++packed;
                var packedObj = new NormalisedByte2();
                packedObj.PackedValue = packed;
                Int32 hc = packedObj.GetHashCode ();
                Assert.That(!hs.Contains(hc));
                hs.Add(hc);
            }
        }
    }

