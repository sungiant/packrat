    /// <summary>
    /// Tests the Byte4 packed data type.
    /// </summary>
    [TestFixture]
    public class Byte4Tests
    {
        /// <summary>
        /// Iterates over a random selection of values within the range of
        /// possible Byte4 values and makes sure that unpacking them and
        /// then re-packing that result yeilds the original packed value.
        /// </summary>
        [Test]
        public void TestRandomValues_i()
        {
            var rand = new System.Random();
            var buff = new Byte[4];

            for(Int32 i = 0; i < Settings.NumTests; ++i)
            {
                rand.NextBytes(buff);
                UInt32 packed = BitConverter.ToUInt32(buff, 0);
                var packedObj = new Byte4();
                packedObj.PackedValue = packed;
                Single realX, realY, realZ, realW = 0f;
                packedObj.UnpackTo(out realX, out realY, out realZ, out realW);
                var newPackedObj = new Byte4(realX, realY, realZ, realW);
                Assert.That(newPackedObj.PackedValue, Is.EqualTo(packed));
            }
        }

        /// <summary>
        /// For a given example, this test ensures that the ToString function
        /// yields the expected string.
        /// </summary>
        [Test]
        public void TestMemberFn_ToString_i()
        {
            var testCase = new Byte4();
            testCase.PackFrom(0.656f, 0.125f, 0.222f, 0.861f);
            String s = testCase.ToString ();
            Assert.That(s, Is.EqualTo("01000001"));
        }

        /// <summary>
        /// Makes sure that the hashing function is good by testing
        /// random scenarios and ensuring that there are no more than a
        /// reasonable number of collisions.
        /// </summary>
        [Test]
        public void TestMemberFn_GetHashCode_i ()
        {
            HashSet<Int32> hs = new HashSet<Int32>();
            var rand = new System.Random();
            var buff = new Byte[4];
            UInt32 collisions = 0;
            for(Int32 i = 0; i < Settings.NumTests; ++i)
            {
                rand.NextBytes(buff);
                BitConverter.ToUInt32(buff, 0);
                UInt32 packed = BitConverter.ToUInt32(buff, 0);
                var packedObj = new Byte4();
                packedObj.PackedValue = packed;
                Int32 hc = packedObj.GetHashCode ();
                if(hs.Contains(hc)) ++collisions;
                hs.Add(hc);
            }
            Assert.That(collisions, Is.LessThan(10));
        }
    }

